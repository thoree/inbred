% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/realisedPhi.R
\name{realisedPhi}
\alias{realisedPhi}
\title{Bootstrap intervals for realised phi}
\usage{
realisedPhi(
  ped,
  ids = NULL,
  N = 2,
  B = 2,
  seed = NULL,
  level = 0.95,
  method = "parametric",
  bca = FALSE,
  plot = F
)
}
\arguments{
\item{ped}{object with allele frequencies.}

\item{ids}{of pair.}

\item{N}{Integer. No of simulations.}

\item{B}{Integer. No of bootstraps.}

\item{seed}{Integer.}

\item{level}{Double}

\item{method}{Character 'parametric' or 'nonparametric'}

\item{bca}{Logical}

\item{plot}{Logical}
}
\value{
Returns a list with two elements, a dataframe and the result
  of last simulation called `lastBoot`(see documentation of `ibdBootstrap`).
  The columns of the data frame are

  * `phi.realised` The realised value for each bootstrap simulation

  * `phi.hat` The estimate for each bootstrap

  * `skew` See details

  * `dist` See documentation of `ibdBootstrap`

  * `lower` Lower bound for interval

  * `phi.pedigree` Pedigree value

  * `upper` Upper bound for interval

  * `coverage`
}
\description{
We consider parametric and nonparametric bootstrap of the kinship coefficient.
}
\details{
See note coverage.pdf
}
\examples{
library(forrel)
library(pedprobr)
library(ribd)
library(moments)
library(coxed)

# Example One parametric and nonparametric simulation with plots
\donttest{
n = 1000 # no of markers
p = rep(0.5, n)
freq = list()
for (i in 1:n)
  freq[[i]] =  list(afreq = c("1" = p[i], "2" = 1- p[i]))
ped = quadHalfFirstCousins()
ped = setMarkers(ped, locusAttributes = freq)
# Above freq can be replaced by NorwegianFrequencies

resParametric = realisedPhi(ped = ped, ids = leaves(ped), N = 1, B = 400,
                            method = "parametric", seed = 17, plot = TRUE)
foo = resParametric$lastBoot
phi.hat = 0.25*foo$k1+0.5*foo$k2
qqnorm(phi.hat, main = "", xlab ="")

resNonparametric = realisedPhi(ped = ped, ids = leaves(ped), N = 1, B = 400,
                            method = "nonparametric", seed = 17, plot = TRUE)
foo = resNonparametric$lastBoot
phi.hat = 0.25*foo$k1+0.5*foo$k2
qqnorm(phi.hat, main = "", xlab ="")
}

}
